<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cont="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       ">

    <!--使用静态工厂创建实例-->
    <bean id="book1" class="com.yejh.factory.BookStaticFactory" factory-method="BookInstance">

        <constructor-arg name="bname" value="搞事"/>
        <constructor-arg name="author" value="sbc"/>
    </bean>

    <bean id="person01" class="com.yejh.bean.Person">
        <!--调用静态方法#{T(全类名).静态方法}
            调用非静态方法#{对象.方法}
        -->
        <property name="name" value="#{T(java.util.UUID).randomUUID().toString()}"/>
        <property name="age" value="#{12.5*5}"/>

    </bean>


    <!--使用注解加入到容器中的组件，和使用配置加入到容器中的组件行为都是默认一样的
        1、组件的id，默认就是组件的类名首字母小写
        @Repository("新id")
        @scope(value="prototype)
        2、组件的作用域，默认就是单例的-->

    <!--    <context:component-scan base-package="com.yejh">-->
    <!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--    </context:component-scan>-->

    <!--使用context:exclude-filter 指定扫描包时不包含的类
        type="annotation"：指定排除规则，按照注解进行排除。标注了指定注解的组件不要
            expression=""：注解的全类名

        type="assignable"：指定排除某个具体的类，按照类排除
            expression=""：类的全类名

        type="aspectj"：后来aspectj表达式

        type="custom"：自定义一个TypeFilter；自己写代码决定哪些使用

        type="regex"：正则表达式
         -->


    <!--使用context:include-filter指定扫描包时要包含的类，只扫描进入哪些组件
        一定要禁用掉默认的过滤规则才行：user-default-filter="false"-->
    <!--    <context:component-scan base-package="com.yejh" use-default-filters="false">-->
    <!--        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>-->
    <!--    </context:component-scan>-->

    <!-- DI（依赖注入）
    使用Autowired注解实现根据类型实现自动匹配
    在指定要扫描的包时，<context:component-scan>
    元素会自动注册一个bean的后置处理器：AutowiredAnnotationBeanPostProcessor的实例。
    该后置处理器可以自动装配标记了@Autowired、@Resource或@Inject注解的属性。
        原理：
        1、先按照类型去容器中找到对应的组件：bookDao = ioc.getBean(BookService)
            （1）找到一个，找到就赋值
            （2）没找到，就抛出异常
            （3）找到多个
                按照成员变量名作为id继续匹配
                    （1）匹配上就装配
                    （2）没有匹配上，就报错
                @Qualifier("")指定一个名作为id，让spring别使用变量名作为id

            Autowired标注的自动装配的属性默认情况下一定要装配上，否则报错
            可以使用@Qualifer(required=false)指定某个属性允许不被装配
                -->
    <context:component-scan base-package="com.yejh">

    </context:component-scan>
</beans>













